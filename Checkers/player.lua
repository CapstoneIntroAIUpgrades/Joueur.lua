-- Generated by Creer, git hash c6767247662bdc8024518de1aebc87bcf634ca49
-- This is a simple class to represent the Player object in the game. You can extend it by adding utility functions here in this file.

local class = require("utilities.class")
local GameObject = require("Checkers.gameObject")

--- @class Player: A player in this game. Every AI controls one player.
local Player = class(GameObject)

--- initializes a Player with basic logic as provided by the Creer code generator
-- @param <table> data: initialization data
function Player:init(data)
    GameObject.init(self, data)

    if data.yDirection == nil then -- set to default value because it was not sent
        self.yDirection = 0
    else
        self.yDirection = tonumber(data.yDirection)
    end

    if data.clientType == nil then -- set to default value because it was not sent
        self.clientType = ""
    else
        self.clientType = tostring(data.clientType)
    end

    if data.name == nil then -- set to default value because it was not sent
        self.name = "Anonymous"
    else
        self.name = tostring(data.name)
    end

    if data.lost == nil then -- set to default value because it was not sent
        self.lost = false
    else
        self.lost = (data.lost)
    end

    if data.timeRemaining == nil then -- set to default value because it was not sent
        self.timeRemaining = 0
    else
        self.timeRemaining = tonumber(data.timeRemaining)
    end

    if data.won == nil then -- set to default value because it was not sent
        self.won = false
    else
        self.won = (data.won)
    end

    if data.loseReason == nil then -- set to default value because it was not sent
        self.loseReason = ""
    else
        self.loseReason = tostring(data.loseReason)
    end

    if data.checkers == nil then -- set to default value because it was not sent
        self.checkers = Table()
    else
        self.checkers = (data.checkers)
    end

    if data.winReason == nil then -- set to default value because it was not sent
        self.winReason = ""
    else
        self.winReason = tostring(data.winReason)
    end

end


--- Tells the server that this player is done with their turn.
function Player:endTurn()
    return self._client:sendCommand(self, "endTurn", {
    })
end

return Player
