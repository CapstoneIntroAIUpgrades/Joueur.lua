-- Generated by Creer at 08:23PM on February 04, 2016 UTC, git hash: '955970b8006ac45cc438822363db1bc1242d9868'
-- This is a simple class to represent the Piece object in the game. You can extend it by adding utility functions here in this file.

local class = require("joueur.utilities.class")
local GameObject = require("games.chess.gameObject")

-- <<-- Creer-Merge: requires -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
-- you can add addtional require(s) here
-- <<-- /Creer-Merge: requires -->>

--- A chess piece
-- @classmod Piece
local Piece = class(GameObject)

-- initializes a Piece with basic logic as provided by the Creer code generator
function Piece:init(...)
    GameObject.init(self, ...)

    -- The following values should get overridden when delta states are merged, but we set them here as a reference for you to see what variables this class has.

    --- When the piece has been captured (removed from the board) this is true. Otherwise false.
    self.captured = false
    --- The file (y) coordinate of the checker represented as a number [1-8].
    self.file = 0
    --- If the piece has moved from its starting position.
    self.hasMoved = false
    --- The player that controls this chess Piece.
    self.owner = nil
    --- The rank (x) coordinate of the checker represented as a letter [a-h].
    self.rank = ""
    --- The type of chess piece this is, either: 'King', 'Queen', 'Knight', 'Rook', 'Bishop', or 'Pawn'.
    self.type = ""

    --- (inherited) String representing the top level Class that this game object is an instance of. Used for reflection to create new instances on clients, but exposed for convenience should AIs want this data.
    -- @field[string] self.gameObjectName
    -- @see GameObject.gameObjectName

    --- (inherited) A unique id for each instance of a GameObject or a sub class. Used for client and server communication. Should never change value after being set.
    -- @field[string] self.id
    -- @see GameObject.id

    --- (inherited) Any strings logged will be stored here when this game object logs the strings. Intended for debugging.
    -- @field[{string, ...}] self.logs
    -- @see GameObject.logs


end

--- Moves the piece from its current location to the given rank and file.
-- @tparam string rank The rank (x) coordinate to move to. Must be [a-h].
-- @tparam number file The file (y) coordinate to move to. Must be [1-8].
-- @tparam[opt=""] string promotionType If this is a Pawn moving to the end of the board then this parameter is what to promote it to.
-- @treturn string The standard algebraic notation (SAN) representation of the move if successful, empty string otherwise. In addition if you fail your move you lose.
function Piece:move(rank, file, promotionType)
    if promotionType == nil then
        promotionType = ""
    end

    return tostring(self:_runOnServer("move", {
        rank = rank,
        file = file,
        promotionType = promotionType,
    }))
end

--- (inherited) Adds a message to this GameObject's logs. Intended for your own debugging purposes, as strings stored here are saved in the gamelog.
-- @function Piece:log
-- @see GameObject:log
-- @tparam string message A string to add to this GameObject's log. Intended for debugging.


-- <<-- Creer-Merge: functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
-- if you want to add any client side logic (such as state checking functions) this is where you can add them
-- <<-- /Creer-Merge: functions -->>

return Piece
